# -*- coding: utf-8 -*-
"""Copy of 2023-Q3 PLN ATIVIDADE PRÁTICA 03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ApUxLnVpqaWZMdJxN8c78eE2SogusOuV

# **Processamento de Linguagem Natural [2023.Q3]**
Prof. Alexandre Donizeti Alves

### **ATIVIDADE PRÁTICA 03 [Tutorial sobre uma API]**

---

A **ATIVIDADE PRÁTICA 03** deve ser feita utilizando o **Google Colab** com uma conta
sua vinculada ao Gmail. O link do seu notebook, armazenado no Google Drive, além do link de um repositório no GitHub e os principais resultados da atividade, devem ser enviados usando o seguinte formulário:

> https://forms.gle/nPsWnUuE5GCeXaiU8 (**AINDA EM CONSTRUÇÃO**)


**IMPORTANTE**: A submissão deve ser feita APENAS POR UM INTEGRANTE DA EQUIPE até o dia 02/11 (quinta-feira - até às 23h59). Por favor, lembre-se de dar permissão de ACESSO IRRESTRITO para o professor da disciplina de PLN.

### **EQUIPE**

---

**POR FAVOR, PREENCHER OS INTEGRANDES DA SUA EQUIPE:**


**Integrante 01:**

`Victor Moreira Barros, 11201810338`

### **API**
---

**QUAL A API SELECIONADA POR SUA EQUIPE?**

`API: Discord`

`Site oficial: https://discord.com/`

`Link para a documentação oficial: https://discord.com/developers/docs/intro`

### **DESCRIÇÃO**
---

Implementar um `notebook` no `Google Colab` para demonstrar passo a passo como usar uma determinada **API** em `Python`, ou seja, criar um **TUTORIAL** destacando desde a instalação e configuração da **API** até as principais finalidades. O **TUTORIAL** deve ser o mais completo possível, com diversos exemplos de uso e permitindo ser facilmente reproduzido.

A **API** deve ser selecionada na seguinte planilha:

https://docs.google.com/spreadsheets/d/1-Q1szJ3UmoE2_3LtcRQyqid5fPIcnpsR3XAPnoxLj2o/edit?usp=sharing

>

**IMPORTANTE:** É obrigatório usar o e-mail da UFABC.

>

**DICA:** Por favor, insira o seu nome ou da sua equipe na ordem definida na planilha. A escolha da **API** deve ser feita de acordo com a lista disponibilizada na planilha. Cada **API** só pode ser escolhida por, no **MÁXIMO**, 2 equipes.

### **ROTEIRO PARA APRESENTAÇÃO DE UMA API**

---
>


**IMPORTANTE**: consulta feita no ChatGPT

>

Como escrever um tutorial sobre uma API em Python usando o Google Colab com foco nas etapas essenciais. Aqui está um guia rápido:

>

* **Passo 01: Introdução**

  >  Apresente a API que você está explicando.

  >  Explique por que é útil ou relevante.

* **Passo 02: Configuração no Google Colab**

  > Explique como os leitores podem abrir um novo notebook no Google Colab.

  > Mostre como importar bibliotecas necessárias.

  > Instrua sobre como instalar quaisquer bibliotecas adicionais, se necessário.

* **Passo 03: Autenticação (se aplicável)**

  > Descreva como configurar a autenticação, caso a API exija.

  > Forneça orientações sobre a obtenção de chaves de API ou tokens.

* **Passo 04: Utilização Básica da API**

  > Demonstre como fazer uma solicitação simples à API.

  > Mostre como processar a resposta da API.

* **Passo 05: Exemplos Práticos**

  > Forneça exemplos práticos e úteis que os leitores podem seguir.

  > Mostre como aplicar a API em cenários do mundo real.


* **Passo 06: Considerações**

  > Recapitule os principais pontos do tutorial.

  > Incentive os leitores a explorar mais a API e experimentar por conta própria.

* **Passo 07: Publicação**

   > Considere compartilhar seu tutorial em plataformas como Medium, GitHub (obrigatório) ou seu blog pessoal.

* **Passo 08: Promoção**

  > Compartilhe seu tutorial nas redes sociais, grupos de desenvolvedores e fóruns relevantes.

**IMPORTANTE**: Lembre-se de manter o tutorial curto e direto ao ponto. Use exemplos de código eficazes e forneça informações práticas que os leitores possam seguir facilmente. O Google Colab é uma ótima plataforma para compartilhar tutoriais, pois permite que os leitores executem o código diretamente no navegador.

### **CRITÉRIOS DE AVALIAÇÃO**
---

As 3 equipes que **criarem os melhores tutoriais**  terão o peso diminuido na AVALIAÇÃO (Prova Escrita) em **25%** (caindo de 40 para 30).

**IMPORTANTE**: a diminuição no peso da AVALIAÇÃO será aplicado para todos os membros da equipe.

### **TUTORIAL**
---

**Discord API**

**SUGESTÃO**: Usar o **ROTEIRO** para apresentação de uma **API**

#### **INTRODUÇÃO**

**Descrição da API**

A API do Discord é uma poderosa ferramenta que permite a personalização, automação e extensão da plataforma Discord, tornando-a mais versátil e adequada às necessidades específicas dos usuários e das comunidades que utilizam a plataforma. Ela desempenha um papel crucial no ecossistema de desenvolvimento em torno do Discord, permitindo a criação de uma ampla variedade de aplicativos e serviços.

#### **CONFIGURAÇÃO**

1. Certifique-se de estar logado na sua conta do Google. Se não estiver logado, faça o login ou crie uma conta.
2. Na página inicial do Google Colab, clique em "Arquivo" no canto superior esquerdo.
3. No menu suspenso, selecione "Novo notebook" ou "Novo bloco de notas". Isso abrirá um novo notebook em branco.
4. Para importar bibliotecas, você pode usar células de código. Por exemplo, para importar a biblioteca NumPy, digite o seguinte código em uma célula e execute a célula:
"""

import numpy as np

"""5. Se você precisa instalar bibliotecas que não estão pré-instaladas no ambiente do Google Colab, você pode fazê-lo usando o comando !pip install"""

!pip install matplotlib

"""6. No caso do Discord, é necessário criar um App no portal do desenvolvedor em `https://discord.com/developers/applications?new_application=true`
7. Para a maioria dos usos da API é também interessante configurar um bot user, que permite que seu bot apareça e se comporte como um usuário do servidor

#### **AUTENTICAÇÃO (SE APLICÁVEL)**

1. Após criar seu bot user será gerao um `Token` que será utilizado para realizar a autenticação da API em todas as requisições (nunca compartilhe seu Token e mantenha-o armazenado de forma privada)
2. Há diversos escopos de uso para a API do Discord (chamados OAuth2 Scopes), mas para simplificar o tutorial utilizaremos o escopo de bot.
3. Os escopos existentes podem ser verificados em: https://discord.com/developers/docs/topics/oauth2#shared-resources-oauth2-scopes
4. Tendo seu Token em mãos e permissões configuradas, é possível realizar chamadas http para a API com o header Authorization, que será responsável por autenticar sua requisição com o servidor do Discord, seguindo o formato abaixo:
"""

import requests
BASE_URL = "https://discord.com/api/v10"
requests.get(f'{BASE_URL}/example', headers={"Authorization": "Bot MTk4NjIyNDgzNDcxOTI1MjQ4.Cl2FMQ.ZnCjm1XVW7vRze4b7Cq4se7kKWs"})

"""#### **UTILIZAÇÃO BÁSICA**

Um exemplo de utilização básica está no envio de uma mensagen:
"""

BASE_URL = "https://discord.com/api/v10"
CHANNEL_ID = ""

headers = {
    'Authorization': f'Bot {TOKEN}',
    'Content-Type': 'application/json',
}

data = {
    'content': "test message",
}

requests.post(f'{BASE_URL}/channels/{CHANNEL_ID}/messages', headers=headers, json=data)

"""#### **EXEMPLOS PRÁTICOS**

Outro exemplo prático pode ser o de manter uma conversa ativa com um usuário do servidor:
"""

import requests
import time

TOKEN = 'Bot MTk4NjIyNDgzNDcxOTI1MjQ4.Cl2FMQ.ZnCjm1XVW7vRze4b7Cq4se7kKWs'

server_id = 'mocked_server_id'
channel_id = 'mocked_channel_id'

user_id = 'user_id_to_respond'

url = f'https://discord.com/api/v10/channels/{channel_id}/messages'

headers = {
    'Authorization': f'{TOKEN}',
    'Content-Type': 'application/json',
}

def send_message(content):
    data = {
        'content': content,
    }
    response = requests.post(url, headers=headers, json=data)
    return response

def read_messages():
    last_message_id = None

    while True:
        params = {
            'limit': 1,
        }

        if last_message_id:
            params['after'] = last_message_id

        response = requests.get(url, headers=headers, params=params)

        if response.status_code == 200:
            messages = response.json()
            if messages:
                last_message = messages[0]
                last_message_id = last_message['id']

                if last_message['author']['id'] == user_id:
                    response = send_message('Obrigado por sua mensagem!')

        time.sleep(5)

read_messages()

"""Um outro exemplo é o de envio de mensagem de boas-vindas para todo novo usuário que entra no servidor:"""

import requests
import json

TOKEN = 'Bot MTk4NjIyNDgzNDcxOTI1MjQ4.Cl2FMQ.ZnCjm1XVW7vRze4b7Cq4se7kKWs'

server_id = 'mocked_server_id'
channel_id = 'mocked_channel_id'

url = f'https://discord.com/api/v10/channels/{channel_id}/messages'

headers = {
    'Authorization': f'Bot {TOKEN}',
    'Content-Type': 'application/json',
}

def send_welcome_message(member):
    message_content = f'Bem-vindo ao servidor, {member.display_name}!'
    data = {
        'content': message_content,
    }
    response = requests.post(url, headers=headers, data=json.dumps(data))
    return response

def on_member_join(member):
    send_welcome_message(member)

"""#### **CONSIDERAÇÕES**

No uso da API HTTP do Discord, a autenticação desempenha um papel fundamental. Garanta a segurança do token de autenticação e use-o em todas as suas solicitações para que o Discord possa reconhecer seu bot ou aplicativo.
  A usabilidade da API é facilitada pela documentação abrangente e clara fornecida pelo Discord. Explore a documentação oficial para entender os recursos disponíveis e como implementá-los.
  A integração com comunidades online é um aspecto valioso da API, sendo uma ferramenta poderosa para criar bots e integrações que enriquecem a experiência em servidores e comunidades no Discord. Com responsabilidade, criatividade e compreensão sólida da autenticação e dos recursos disponíveis, você pode aproveitar ao máximo essa plataforma de comunicação versátil.

**REFERÊNCIAS**

---

https://discord.com/developers/docs/topics/oauth2#shared-resources-oauth2-scopes

https://discord.com/developers/docs/reference

https://github.com/discord/discord-example-app/blob/main/examples/app.js
"""