# -*- coding: utf-8 -*-
"""Copy of 2023-Q3 PLN ATIVIDADE PRÁTICA 04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D5i2jIbv_Hp5wMrBEGYv1JtOdmKqc_w0

# **Processamento de Linguagem Natural [2023.Q3]**
Prof. Alexandre Donizeti Alves

### **ATIVIDADE PRÁTICA 04 [Uso da API da OpenAI com técnicas de PLN]**

A **ATIVIDADE PRÁTICA 04** deve ser feita utilizando o **Google Colab** com uma conta sua vinculada ao Gmail. O link do seu notebook, armazenado no Google Drive, além do link de um repositório no GitHub e os principais resultados da atividade, devem ser enviados usando o seguinte formulário:

> https://forms.gle/GzwCq3R7ExtE9g9a8


**IMPORTANTE**: A submissão deve ser feita até o dia 20/11 (segunda-feira) APENAS POR UM INTEGRANTE DA EQUIPE, até às 23h59. Por favor, lembre-se de dar permissão de ACESSO IRRESTRITO para o professor da disciplina de PLN.

### **EQUIPE**

---

**POR FAVOR, PREENCHER OS INTEGRANDES DA SUA EQUIPE:**


**Integrante 01:**

`Victor Moreira Barros RA:11201810338`

### **LIVRO**
---

`Processamento de Linguagem Natural - Conceitos, Técnicas e Aplicações em Português.`

>

Disponível gratuitamente em:
  
  > https://brasileiraspln.com/livro-pln/1a-edicao/.


**POR FAVOR, PREENCHER OS CAPITULOS SELECIONADOS PARA A SUA EQUIPE:**

`Primeiro capítulo: 6`

`Segundo capítulo: 20`

### **DESCRIÇÃO**
---

Implementar um `notebook` no `Google Colab` que faça uso da **API da OpenAI** aplicando, no mínimo, 3 técnicas de PLN. As técnicas devem ser aplicadas nos 2 (DOIS) capítulos do livro **Processamento de Linguagem Natural - Conceitos, Técnicas e Aplicações em Português**.

>

**RESTRIÇÃO**: É obrigatório usar o *endpoint* "*`Chat Completions`*".

>

As seguintes técnicas de PLN podem ser usadas:

*   Correção Gramatical
*   Classificação de Textos
*   Análise de Sentimentos
*   Detecção de Emoções
*   Extração de Palavras-chave
*   Tradução de Textos
*   Sumarização de Textos
*   **Similaridade de Textos**
*   **Reconhecimento de Entidades Nomeadas**
*   **Sistemas de Perguntas e Respostas**

>

Os capítulos devem ser os mesmos selecionados na **ATIVIDADE PRÁTICA 02**. Para consultar os capítulos, considere a seguinte planilha:

>

> https://docs.google.com/spreadsheets/d/1ZutzQ3v1OJgsgzCvCwxXlRIQ3ChXNlHNvB63JQvYsbo/edit?usp=sharing

>
>

**IMPORTANTE:** É obrigatório usar o e-mail da UFABC. Não é permitido alterar os capítulos já selecionados.

### **CRITÉRIOS DE AVALIAÇÃO**
---

Serão considerados como critérios de avaliação as técnicas usadas e a criatividade envolvida na aplicação das mesmas.

### **IMPLEMENTAÇÃO**
---
"""

!pip install tiktoken -q
!pip install cohere -q
!pip install openai -q

# por favor, inserir o código a partir daqui...
import requests
from openai import OpenAI
from bs4 import BeautifulSoup
import time

openAIKey = "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"

client = OpenAI(api_key=openAIKey)
open_ai_max_request=4097

chapter_6 = requests.get("https://brasileiraspln.com/livro-pln/1a-edicao/parte4/cap6/cap6.html")
chapter_20 = requests.get("https://brasileiraspln.com/livro-pln/1a-edicao/parte8/cap20/cap20.html")

chapter_6_paragraphs = BeautifulSoup(chapter_6.content, 'html.parser').find("main", {"class": "content"}).find_all("p")
chapter_20_paragraphs = BeautifulSoup(chapter_20.content, 'html.parser').find("main", {"class": "content"}).find_all("p")

chapter_6_text = ""
chapter_20_text = ""

for paragraph in chapter_6_paragraphs:
  chapter_6_text = chapter_6_text + " " + paragraph.get_text()

for paragraph in chapter_20_paragraphs:
  chapter_20_text = chapter_20_text + " " + paragraph.get_text()


def make_requestable_texts(text, char_limit):
  i = 0
  requestable_texts = []
  while i < len(text):
    start = i
    i += char_limit

    requestable_texts.append(text[start:i])

  return requestable_texts

def summarize(requestable_texts):
  summarization = ""
  for text in requestable_texts:
    partial_summarization = client.completions.create(
    model = "text-curie-001",
    prompt="Suponha que você é um estudando de ciência da computação e está fazendo um trabalho para a" +
        "disciplina de processamento de linguagem natural.Resuma em poucas palavras o texto: " +  text)

    summarization += "" + partial_summarization.choices[0].text
    time.sleep(20) # due to rate limit

  return summarization

def key_words(requestable_texts):
  words = ""
  for text in requestable_texts:
    partial_words = client.chat.completions.create(
    model = "gpt-3.5-turbo",
    messages = [{"role": "user", "content": "Extraia as palavras-chave do seguinte texto" + text}]
    )

    words += "" + partial_words.choices[0].message.content
    time.sleep(20) # due to rate limit

  return words

def translate(requestable_texts):
  translation = ""
  for text in requestable_texts:
    partial_translation = client.chat.completions.create(
    model = "gpt-3.5-turbo",
    messages = [{"role": "user", "content": "Traduza o seguinte texto para o japonês" + text}]
    )

    translation += "" + partial_translation.choices[0].message.content
    time.sleep(20) # due to rate limit

  return translation

chapter_6_request_texts = make_requestable_texts(chapter_6_text, open_ai_max_request)
chapter_20_request_texts = make_requestable_texts(chapter_20_text, open_ai_max_request)

# summarization
chapter_6_summarization = summarize(chapter_6_request_texts)
chapter_20_summarization = summarize(chapter_20_request_texts)

print(chapter_6_summarization, chapter_20_summarization)

# keywords
chapter_6_words = key_words(chapter_6_request_texts)
chapter_20_words = key_words(chapter_20_request_texts)

print(chapter_6_words, chapter_20_words)

# translation
chapter_6_translations = translate(chapter_6_request_texts)
chapter_20_translations = translate(chapter_20_request_texts)

print(chapter_6_translations, chapter_20_translations)